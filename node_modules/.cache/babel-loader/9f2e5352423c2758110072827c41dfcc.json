{"ast":null,"code":"let initialState = {\n  item: [],\n  lenght: null,\n  amoun: 0\n};\n\nconst buyItem = (state = initialState, action) => {\n  switch (action.type) {\n    case \"BUYITEM\":\n      {\n        let n = state.item.length;\n        let buyeat = {\n          _id: n,\n          id: action.info.id,\n          name: action.info.name,\n          eat: action.info,\n          cost: action.cost,\n          size: action.size,\n          finalcost: action.cost,\n          amount: action.info.amount,\n          photoURL: action.info.photoURL\n        };\n\n        if (action.size > 0) {\n          if (!state.item.some(buy => buy.id === action.info.id)) {\n            debugger;\n            return { ...state,\n              item: [...state.item, buyeat],\n              lenght: state.item.length,\n              amoun: state.amoun + action.info.amount\n            };\n          } else {\n            debugger;\n\n            if (!state.item.some(buy => buy.size === action.size)) {\n              return { ...state,\n                item: [...state.item, buyeat],\n                lenght: state.item.length,\n                amoun: state.amoun + action.info.amount\n              };\n            } else {\n              let searchId = action.info.id;\n              let indexId = state.item.findIndex(el => el.id === searchId);\n              return { ...state,\n                // @ts-ignore\n                ...(state.item[indexId].eat.amount += 1),\n                amoun: state.amoun + 1,\n                ...(state.item[indexId].cost = Object(state.item[indexId].finalcost * state.item[indexId].eat.amount))\n              };\n            }\n          }\n        } else if (!state.item.some(buy => buy.id === action.info.id)) {\n          return { ...state,\n            item: [...state.item, buyeat],\n            lenght: state.item.length,\n            amoun: state.amoun\n          };\n        } else {\n          let Id = action.info.id;\n          let index = state.item.findIndex(el => el.id === Id);\n          return { ...state,\n            ...(state.item[index].eat.amount += Object(1)),\n            amoun: state.amoun + 1,\n            ...(state.item[index].cost = Object(state.item[index].finalcost * state.item[index].eat.amount))\n          };\n        }\n      }\n\n    case \"LENGHT\":\n      {\n        return { ...state,\n          lenght: action.lenght\n        };\n      }\n\n    case \"AMOUNTSMINUS\":\n      {\n        return { ...state,\n          amoun: state.amoun - action.newam\n        };\n      }\n\n    case \"AMOUNTSPLUS\":\n      {\n        return { ...state,\n          amoun: state.amoun + 1\n        };\n      }\n\n    case \"DELETEARRAY\":\n      {\n        return { ...state,\n          item: [],\n          lenght: null,\n          amoun: 0\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  buy: (info, cost, size) => {\n    debugger;\n    return {\n      type: \"BUYITEM\",\n      info,\n      cost,\n      size\n    };\n  },\n  deleteLenght: lenght => {\n    return {\n      type: \"LENGHT\",\n      lenght\n    };\n  },\n  amountLeghtminus: newam => {\n    return {\n      type: \"AMOUNTSMINUS\",\n      newam\n    };\n  },\n  amountLeghtplus: () => {\n    return {\n      type: \"AMOUNTSPLUS\"\n    };\n  },\n  daletArray: () => {\n    return {\n      type: \"DELETEARRAY\"\n    };\n  }\n};\nexport default buyItem;","map":{"version":3,"sources":["/Users/daloniil/Desktop/Programer/Store/src/Redux/buy-item-reducer.ts"],"names":["initialState","item","lenght","amoun","buyItem","state","action","type","n","length","buyeat","_id","id","info","name","eat","cost","size","finalcost","amount","photoURL","some","buy","searchId","indexId","findIndex","el","Object","Id","index","newam","actions","deleteLenght","amountLeghtminus","amountLeghtplus","daletArray"],"mappings":"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","sourcesContent":["import {actionsType} from \"./redux-store\";\nimport {ReducerType} from \"../Types/Type\";\n\n\nlet initialState = {\n    item: [] as Array<BuyItemType>,\n    lenght: null as number | null,\n    amoun: 0 as number,\n\n};\n\n\nexport type BuyItemType = {\n    _id: number,\n    id: number,\n    name: string,\n    eat: ReducerType\n    photoURL: string\n    cost: number,\n    size: number,\n    finalcost: number,\n    amount: number\n\n\n}\n\n\nexport type initialStateType = typeof initialState\n\n\nconst buyItem = (state = initialState, action: ActionsTypes): initialStateType => {\n    switch (action.type) {\n        case \"BUYITEM\": {\n\n\n            let n = state.item.length;\n            let buyeat = {\n                _id: n,\n                id: action.info.id,\n                name: action.info.name,\n                eat: action.info,\n                cost: action.cost,\n                size: action.size,\n                finalcost: action.cost,\n                amount: action.info.amount,\n                photoURL: action.info.photoURL\n\n            }\n\n\n            if (action.size > 0) {\n                if (!state.item.some((buy) => buy.id === action.info.id)) {\n                    debugger\n                    return {\n                        ...state,\n                        item: [...state.item, buyeat],\n                        lenght: state.item.length,\n                        amoun: state.amoun + action.info.amount\n\n                    }\n\n                } else {\n                    debugger\n\n                    if (!state.item.some((buy) => buy.size === action.size)) {\n                        return {\n                            ...state,\n                            item: [...state.item, buyeat],\n                            lenght: state.item.length,\n                            amoun: state.amoun + action.info.amount\n                        }\n                    } else {\n\n                        let searchId = action.info.id\n                        let indexId = state.item.findIndex(el => el.id === searchId)\n                        return {\n                            ...state,\n                            // @ts-ignore\n                            ...state.item[indexId].eat.amount += 1,\n                            amoun: state.amoun + 1,\n                            ...state.item[indexId].cost = Object(state.item[indexId].finalcost * state.item[indexId].eat.amount as {}),\n                        }\n                    }\n\n                }\n\n            } else if (!state.item.some((buy) => buy.id === action.info.id)) {\n                return {\n                    ...state,\n                    item: [...state.item, buyeat],\n                    lenght: state.item.length,\n                    amoun: state.amoun,\n\n                }\n            } else {\n                let Id = action.info.id\n                let index = state.item.findIndex(el => el.id === Id)\n\n                return {\n                    ...state,\n                    ...state.item[index].eat.amount += Object(1 as {}),\n                    amoun: state.amoun + 1,\n                    ...state.item[index].cost = Object(state.item[index].finalcost * state.item[index].eat.amount as {}),\n                }\n            }\n        }\n\n\n        case \"LENGHT\": {\n            return {\n                ...state,\n                lenght: action.lenght\n            }\n        }\n\n        case \"AMOUNTSMINUS\": {\n            return {\n                ...state,\n                amoun: state.amoun - action.newam\n            }\n        }\n\n        case \"AMOUNTSPLUS\": {\n            return {\n                ...state,\n                amoun: state.amoun + 1\n            }\n        }\n\n        case \"DELETEARRAY\": {\n            return {\n                ...state,\n                item: [], lenght: null, amoun: 0\n            }\n        }\n\n\n        default:\n            return state;\n    }\n}\n\n\ntype ActionsTypes = actionsType<typeof actions>\n\nexport const actions = {\n\n    buy: (info: ReducerType, cost: number, size: number) => {\n        debugger\n\n        return {\n            type: \"BUYITEM\",\n            info, cost, size\n        } as const\n    },\n\n    deleteLenght: (lenght: number) => {\n        return {\n            type: \"LENGHT\",\n            lenght\n        } as const\n    },\n\n    amountLeghtminus: (newam: number) => {\n        return {\n            type: \"AMOUNTSMINUS\",\n            newam\n        } as const\n    },\n\n    amountLeghtplus: () => {\n        return {\n            type: \"AMOUNTSPLUS\",\n        } as const\n    },\n    daletArray: () => {\n        return {\n            type: \"DELETEARRAY\",\n        } as const\n    }\n}\n\n\nexport default buyItem;"]},"metadata":{},"sourceType":"module"}