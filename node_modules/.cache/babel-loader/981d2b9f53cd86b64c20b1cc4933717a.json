{"ast":null,"code":"const BUYITEM = \"BUY-ITEM\";\nconst LENGHT = \"LENGHT\";\nlet initialState = {\n  item: [],\n  lenght: null\n};\n\nconst buyItem = (state = initialState, action) => {\n  switch (action.type) {\n    case BUYITEM:\n      {\n        let n = state.item.length;\n        let buyeat = {\n          id: action.info.id,\n          name: action.info.name,\n          eat: action.info,\n          cost: action.cost,\n          size: action.size\n        };\n\n        if (!state.item.some(buy => buy.id === action.info.id)) {\n          return { ...state,\n            item: [...state.item, buyeat],\n            lenght: state.item.length\n          };\n        } else if (!state.item.some(buy => buy.cost === action.cost)) {\n          return { ...state,\n            item: [...state.item, buyeat],\n            lenght: state.item.length\n          };\n        } else {\n          debugger;\n          let index = state.item.indexOf(buyItem);\n          state.item[index].eat.amount += 1;\n        }\n      }\n\n    case LENGHT:\n      {\n        return { ...state,\n          lenght: action.lenght\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const buy = (info, cost, size) => {\n  return {\n    type: BUYITEM,\n    info,\n    cost,\n    size\n  };\n};\nexport const deleteLenght = lenght => {\n  return {\n    type: LENGHT,\n    lenght\n  };\n};\nexport default buyItem;","map":{"version":3,"sources":["/Users/daloniil/Desktop/React/Pizza/pizzaProject/src/Redux/buy-item-reducer.js"],"names":["BUYITEM","LENGHT","initialState","item","lenght","buyItem","state","action","type","n","length","buyeat","id","info","name","eat","cost","size","some","buy","index","indexOf","amount","deleteLenght"],"mappings":"AAAA,MAAMA,OAAO,GAAG,UAAhB;AACA,MAAMC,MAAM,GAAG,QAAf;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,IAAI,EAAE,EADS;AAEfC,EAAAA,MAAM,EAAE;AAFO,CAAnB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,OAAL;AAAc;AAGV,YAAIS,CAAC,GAAGH,KAAK,CAACH,IAAN,CAAWO,MAAnB;AACA,YAAIC,MAAM,GAAG;AACTC,UAAAA,EAAE,EAAEL,MAAM,CAACM,IAAP,CAAYD,EADP;AAETE,UAAAA,IAAI,EAAEP,MAAM,CAACM,IAAP,CAAYC,IAFT;AAGTC,UAAAA,GAAG,EAAER,MAAM,CAACM,IAHH;AAITG,UAAAA,IAAI,EAAET,MAAM,CAACS,IAJJ;AAKTC,UAAAA,IAAI,EAAEV,MAAM,CAACU;AALJ,SAAb;;AAQA,YAAI,CAACX,KAAK,CAACH,IAAN,CAAWe,IAAX,CAAiBC,GAAD,IAASA,GAAG,CAACP,EAAJ,KAAWL,MAAM,CAACM,IAAP,CAAYD,EAAhD,CAAL,EAA0D;AACtD,iBAAO,EACH,GAAGN,KADA;AAEHH,YAAAA,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgBQ,MAAhB,CAFH;AAGHP,YAAAA,MAAM,EAAEE,KAAK,CAACH,IAAN,CAAWO;AAHhB,WAAP;AAMH,SAPD,MAOO,IAAI,CAACJ,KAAK,CAACH,IAAN,CAAWe,IAAX,CAAiBC,GAAD,IAASA,GAAG,CAACH,IAAJ,KAAaT,MAAM,CAACS,IAA7C,CAAL,EAAyD;AAC5D,iBAAO,EACH,GAAGV,KADA;AAEHH,YAAAA,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgBQ,MAAhB,CAFH;AAGHP,YAAAA,MAAM,EAAEE,KAAK,CAACH,IAAN,CAAWO;AAHhB,WAAP;AAOH,SARM,MAQA;AACH;AACA,cAAIU,KAAK,GAAGd,KAAK,CAACH,IAAN,CAAWkB,OAAX,CAAmBhB,OAAnB,CAAZ;AACAC,UAAAA,KAAK,CAACH,IAAN,CAAWiB,KAAX,EAAkBL,GAAlB,CAAsBO,MAAtB,IAAgC,CAAhC;AACH;AAEJ;;AAED,SAAKrB,MAAL;AAAa;AACT,eAAO,EACH,GAAGK,KADA;AAEHF,UAAAA,MAAM,EAAEG,MAAM,CAACH;AAFZ,SAAP;AAIH;;AAGD;AACI,aAAOE,KAAP;AA7CR;AA+CH,CAhDD;;AAmDA,OAAO,MAAMa,GAAG,GAAG,CAACN,IAAD,EAAOG,IAAP,EAAaC,IAAb,KAAsB;AACrC,SAAO;AACHT,IAAAA,IAAI,EAAER,OADH;AAEHa,IAAAA,IAFG;AAEGG,IAAAA,IAFH;AAESC,IAAAA;AAFT,GAAP;AAIH,CALM;AAOP,OAAO,MAAMM,YAAY,GAAInB,MAAD,IAAY;AACpC,SAAO;AACHI,IAAAA,IAAI,EAAEP,MADH;AAEHG,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,eAAeC,OAAf","sourcesContent":["const BUYITEM = \"BUY-ITEM\"\nconst LENGHT = \"LENGHT\"\n\n\nlet initialState = {\n    item: [],\n    lenght: null\n\n};\n\n\nconst buyItem = (state = initialState, action) => {\n    switch (action.type) {\n        case BUYITEM: {\n\n\n            let n = state.item.length;\n            let buyeat = {\n                id: action.info.id,\n                name: action.info.name,\n                eat: action.info,\n                cost: action.cost,\n                size: action.size,\n            }\n\n            if (!state.item.some((buy) => buy.id === action.info.id)) {\n                return {\n                    ...state,\n                    item: [...state.item, buyeat],\n                    lenght: state.item.length\n\n                }\n            } else if (!state.item.some((buy) => buy.cost === action.cost)) {\n                return {\n                    ...state,\n                    item: [...state.item, buyeat],\n                    lenght: state.item.length\n\n                }\n\n            } else {\n                debugger\n                let index = state.item.indexOf(buyItem)\n                state.item[index].eat.amount += 1\n            }\n\n        }\n\n        case LENGHT: {\n            return {\n                ...state,\n                lenght: action.lenght\n            }\n        }\n\n\n        default:\n            return state;\n    }\n}\n\n\nexport const buy = (info, cost, size) => {\n    return {\n        type: BUYITEM,\n        info, cost, size\n    }\n}\n\nexport const deleteLenght = (lenght) => {\n    return {\n        type: LENGHT,\n        lenght\n    }\n}\n\nexport default buyItem;"]},"metadata":{},"sourceType":"module"}