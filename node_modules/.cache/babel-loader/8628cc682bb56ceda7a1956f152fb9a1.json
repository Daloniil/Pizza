{"ast":null,"code":"var _jsxFileName = \"/Users/daloniil/Desktop/React/Pizza/pizzaProject/src/Components/Buy/BuyContainer.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport Buy from \"./Buy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LastSeenContainer extends React.Component {\n  render() {\n    function removeDuplicates(arr) {\n      const result = [];\n      const duplicatesIndices = []; // Перебираем каждый элемент в исходном массиве\n\n      debugger;\n      arr.forEach((current, index) => {\n        if (duplicatesIndices.includes(index)) return;\n        result.push(current); // Сравниваем каждый элемент в массиве после текущего\n\n        for (let comparisonIndex = index + 1; comparisonIndex < arr.length; comparisonIndex++) {\n          const comparison = arr[comparisonIndex];\n          const currentKeys = Object.keys(current);\n          const comparisonKeys = Object.keys(comparison); // Проверяем длину массивов\n\n          if (currentKeys.length !== comparisonKeys.length) continue; // Проверяем значение ключей\n\n          const currentKeysString = currentKeys.sort().join(\"\").toLowerCase();\n          const comparisonKeysString = comparisonKeys.sort().join(\"\").toLowerCase();\n          if (currentKeysString !== comparisonKeysString) continue; // Проверяем индексы ключей\n\n          let valuesEqual = true;\n\n          for (let i = 0; i < currentKeys.length; i++) {\n            const key = currentKeys[i];\n\n            if (current[key] !== comparison[key]) {\n              valuesEqual = false;\n              break;\n            }\n          }\n\n          if (valuesEqual) duplicatesIndices.push(comparisonIndex);\n        } // Конец цикла\n\n      });\n      return result;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Buy, {\n      item: removeDuplicates(this.props.item)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nlet mapStateToprops = state => {\n  return {\n    item: state.BuyPage.item\n  };\n};\n\nexport default compose(connect(mapStateToprops, {}))(LastSeenContainer);","map":{"version":3,"sources":["/Users/daloniil/Desktop/React/Pizza/pizzaProject/src/Components/Buy/BuyContainer.jsx"],"names":["React","connect","compose","Buy","LastSeenContainer","Component","render","removeDuplicates","arr","result","duplicatesIndices","forEach","current","index","includes","push","comparisonIndex","length","comparison","currentKeys","Object","keys","comparisonKeys","currentKeysString","sort","join","toLowerCase","comparisonKeysString","valuesEqual","i","key","props","item","mapStateToprops","state","BuyPage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;;AAGA,MAAMC,iBAAN,SAAgCJ,KAAK,CAACK,SAAtC,CAAgD;AAG5CC,EAAAA,MAAM,GAAG;AAGL,aAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAE3B,YAAMC,MAAM,GAAG,EAAf;AACA,YAAMC,iBAAiB,GAAG,EAA1B,CAH2B,CAK3B;;AACA;AACAF,MAAAA,GAAG,CAACG,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAE5B,YAAIH,iBAAiB,CAACI,QAAlB,CAA2BD,KAA3B,CAAJ,EAAuC;AAEvCJ,QAAAA,MAAM,CAACM,IAAP,CAAYH,OAAZ,EAJ4B,CAM5B;;AACA,aAAK,IAAII,eAAe,GAAGH,KAAK,GAAG,CAAnC,EAAsCG,eAAe,GAAGR,GAAG,CAACS,MAA5D,EAAoED,eAAe,EAAnF,EAAuF;AAEnF,gBAAME,UAAU,GAAGV,GAAG,CAACQ,eAAD,CAAtB;AACA,gBAAMG,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYT,OAAZ,CAApB;AACA,gBAAMU,cAAc,GAAGF,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAAvB,CAJmF,CAMnF;;AACA,cAAIC,WAAW,CAACF,MAAZ,KAAuBK,cAAc,CAACL,MAA1C,EAAkD,SAPiC,CASnF;;AACA,gBAAMM,iBAAiB,GAAGJ,WAAW,CAACK,IAAZ,GAAmBC,IAAnB,CAAwB,EAAxB,EAA4BC,WAA5B,EAA1B;AACA,gBAAMC,oBAAoB,GAAGL,cAAc,CAACE,IAAf,GAAsBC,IAAtB,CAA2B,EAA3B,EAA+BC,WAA/B,EAA7B;AACA,cAAIH,iBAAiB,KAAKI,oBAA1B,EAAgD,SAZmC,CAcnF;;AACA,cAAIC,WAAW,GAAG,IAAlB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAAW,CAACF,MAAhC,EAAwCY,CAAC,EAAzC,EAA6C;AACzC,kBAAMC,GAAG,GAAGX,WAAW,CAACU,CAAD,CAAvB;;AACA,gBAAIjB,OAAO,CAACkB,GAAD,CAAP,KAAiBZ,UAAU,CAACY,GAAD,CAA/B,EAAsC;AAClCF,cAAAA,WAAW,GAAG,KAAd;AACA;AACH;AACJ;;AACD,cAAIA,WAAJ,EAAiBlB,iBAAiB,CAACK,IAAlB,CAAuBC,eAAvB;AAEpB,SAhC2B,CAgC1B;;AACL,OAjCD;AAkCA,aAAOP,MAAP;AACH;;AAGD,wBAEI,QAAC,GAAD;AAAK,MAAA,IAAI,EAAEF,gBAAgB,CAAC,KAAKwB,KAAL,CAAWC,IAAZ;AAA3B;AAAA;AAAA;AAAA;AAAA,YAFJ;AAIH;;AAvD2C;;AA2DhD,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAE7B,SAAO;AACHF,IAAAA,IAAI,EAAEE,KAAK,CAACC,OAAN,CAAcH;AADjB,GAAP;AAOH,CATD;;AAWA,eAAe9B,OAAO,CAClBD,OAAO,CAACgC,eAAD,EAAkB,EAAlB,CADW,CAAP,CAEb7B,iBAFa,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport Buy from \"./Buy\";\n\n\nclass LastSeenContainer extends React.Component {\n\n\n    render() {\n\n\n        function removeDuplicates(arr) {\n\n            const result = [];\n            const duplicatesIndices = [];\n\n            // Перебираем каждый элемент в исходном массиве\n            debugger\n            arr.forEach((current, index) => {\n\n                if (duplicatesIndices.includes(index)) return;\n\n                result.push(current);\n\n                // Сравниваем каждый элемент в массиве после текущего\n                for (let comparisonIndex = index + 1; comparisonIndex < arr.length; comparisonIndex++) {\n\n                    const comparison = arr[comparisonIndex];\n                    const currentKeys = Object.keys(current);\n                    const comparisonKeys = Object.keys(comparison);\n\n                    // Проверяем длину массивов\n                    if (currentKeys.length !== comparisonKeys.length) continue;\n\n                    // Проверяем значение ключей\n                    const currentKeysString = currentKeys.sort().join(\"\").toLowerCase();\n                    const comparisonKeysString = comparisonKeys.sort().join(\"\").toLowerCase();\n                    if (currentKeysString !== comparisonKeysString) continue;\n\n                    // Проверяем индексы ключей\n                    let valuesEqual = true;\n                    for (let i = 0; i < currentKeys.length; i++) {\n                        const key = currentKeys[i];\n                        if (current[key] !== comparison[key]) {\n                            valuesEqual = false;\n                            break;\n                        }\n                    }\n                    if (valuesEqual) duplicatesIndices.push(comparisonIndex);\n\n                } // Конец цикла\n            });\n            return result;\n        }\n\n\n        return (\n\n            <Buy item={removeDuplicates(this.props.item)}/>\n        )\n    }\n}\n\n\nlet mapStateToprops = (state) => {\n\n    return {\n        item: state.BuyPage.item\n\n\n    }\n\n\n}\n\nexport default compose(\n    connect(mapStateToprops, {}),\n)(LastSeenContainer)\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}