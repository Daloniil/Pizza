{"ast":null,"code":"const BUYITEM = \"BUY-ITEM\";\nlet initialState = {\n  item: [],\n  lenght: null\n};\n\nconst buyItem = (state = initialState, action) => {\n  switch (action.type) {\n    case BUYITEM:\n      {\n        let n = state.item.length;\n\n        function removeDuplicates() {\n          const result = [];\n          const duplicatesIndices = []; // Перебираем каждый элемент в исходном массиве\n\n          debugger;\n          action.info.forEach((current, index) => {\n            if (duplicatesIndices.includes(index)) return;\n            result.push(current); // Сравниваем каждый элемент в массиве после текущего\n\n            for (let comparisonIndex = index + 1; comparisonIndex < action.info.length; comparisonIndex++) {\n              const comparison = action.info[comparisonIndex];\n              const currentKeys = Object.keys(current);\n              const comparisonKeys = Object.keys(comparison); // Проверяем длину массивов\n\n              if (currentKeys.length !== comparisonKeys.length) continue; // Проверяем значение ключей\n\n              const currentKeysString = currentKeys.sort().join(\"\").toLowerCase();\n              const comparisonKeysString = comparisonKeys.sort().join(\"\").toLowerCase();\n              if (currentKeysString !== comparisonKeysString) continue; // Проверяем индексы ключей\n\n              let valuesEqual = true;\n\n              for (let i = 0; i < currentKeys.length; i++) {\n                const key = currentKeys[i];\n\n                if (current[key] !== comparison[key]) {\n                  valuesEqual = false;\n                  break;\n                }\n              }\n\n              if (valuesEqual) duplicatesIndices.push(comparisonIndex);\n            } // Конец цикла\n\n          });\n          return result;\n        }\n\n        let buyeat = {\n          _id: n,\n          eat: removeDuplicates(),\n          cost: action.cost,\n          size: action.size\n        };\n        return { ...state,\n          item: [...state.item, buyeat],\n          lenght: state.item.length\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const buy = (info, cost, size) => {\n  return {\n    type: BUYITEM,\n    info,\n    cost,\n    size\n  };\n};\nexport default buyItem;","map":{"version":3,"sources":["/Users/daloniil/Desktop/React/Pizza/pizzaProject/src/Redux/buy-item-reducer.js"],"names":["BUYITEM","initialState","item","lenght","buyItem","state","action","type","n","length","removeDuplicates","result","duplicatesIndices","info","forEach","current","index","includes","push","comparisonIndex","comparison","currentKeys","Object","keys","comparisonKeys","currentKeysString","sort","join","toLowerCase","comparisonKeysString","valuesEqual","i","key","buyeat","_id","eat","cost","size","buy"],"mappings":"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","sourcesContent":["const BUYITEM = \"BUY-ITEM\"\n\n\nlet initialState = {\n    item: [],\n    lenght: null\n\n};\n\n\nconst buyItem = (state = initialState, action) => {\n    switch (action.type) {\n        case BUYITEM: {\n\n\n            let n = state.item.length;\n\n            function removeDuplicates() {\n\n                const result = [];\n                const duplicatesIndices = [];\n\n                // Перебираем каждый элемент в исходном массиве\n                debugger\n                action.info.forEach((current, index) => {\n\n                    if (duplicatesIndices.includes(index)) return;\n\n                    result.push(current);\n\n                    // Сравниваем каждый элемент в массиве после текущего\n                    for (let comparisonIndex = index + 1; comparisonIndex < action.info.length; comparisonIndex++) {\n\n                        const comparison = action.info[comparisonIndex];\n                        const currentKeys = Object.keys(current);\n                        const comparisonKeys = Object.keys(comparison);\n\n                        // Проверяем длину массивов\n                        if (currentKeys.length !== comparisonKeys.length) continue;\n\n                        // Проверяем значение ключей\n                        const currentKeysString = currentKeys.sort().join(\"\").toLowerCase();\n                        const comparisonKeysString = comparisonKeys.sort().join(\"\").toLowerCase();\n                        if (currentKeysString !== comparisonKeysString) continue;\n\n                        // Проверяем индексы ключей\n                        let valuesEqual = true;\n                        for (let i = 0; i < currentKeys.length; i++) {\n                            const key = currentKeys[i];\n                            if (current[key] !== comparison[key]) {\n                                valuesEqual = false;\n                                break;\n                            }\n                        }\n                        if (valuesEqual) duplicatesIndices.push(comparisonIndex);\n\n                    } // Конец цикла\n                });\n                return result;\n            }\n\n            let buyeat = {\n                _id: n,\n                eat: removeDuplicates(),\n                cost: action.cost,\n                size: action.size,\n            }\n\n\n            return {\n\n\n                ...state,\n                item: [...state.item, buyeat],\n                lenght: state.item.length\n            }\n        }\n\n\n        default:\n            return state;\n    }\n}\n\n\nexport const buy = (info, cost, size) => {\n    return {\n        type: BUYITEM,\n        info, cost, size\n    }\n}\n\n\nexport default buyItem;"]},"metadata":{},"sourceType":"module"}