{"ast":null,"code":"const BUYITEM = \"BUY-ITEM\";\n\nfunction removeDuplicates(arr) {\n  const result = [];\n  const duplicatesIndices = []; // Перебираем каждый элемент в исходном массиве\n\n  debugger;\n  arr.forEach((current, index) => {\n    if (duplicatesIndices.includes(index)) return;\n    result.push(current); // Сравниваем каждый элемент в массиве после текущего\n\n    for (let comparisonIndex = index + 1; comparisonIndex < arr.length; comparisonIndex++) {\n      const comparison = arr[comparisonIndex];\n      const currentKeys = Object.keys(current);\n      const comparisonKeys = Object.keys(comparison); // Проверяем длину массивов\n\n      if (currentKeys.length !== comparisonKeys.length) continue; // Проверяем значение ключей\n\n      const currentKeysString = currentKeys.sort().join(\"\").toLowerCase();\n      const comparisonKeysString = comparisonKeys.sort().join(\"\").toLowerCase();\n      if (currentKeysString !== comparisonKeysString) continue; // Проверяем индексы ключей\n\n      let valuesEqual = true;\n\n      for (let i = 0; i < currentKeys.length; i++) {\n        const key = currentKeys[i];\n\n        if (current[key] !== comparison[key]) {\n          valuesEqual = false;\n          break;\n        }\n      }\n\n      if (valuesEqual) duplicatesIndices.push(comparisonIndex);\n    } // Конец цикла\n\n  });\n  return result;\n}\n\nlet initialState = {\n  item: [],\n  lenght: null\n};\n\nconst buyItem = (state = initialState, action) => {\n  switch (action.type) {\n    case BUYITEM:\n      {\n        let n = state.item.length;\n        debugger;\n        let buyeat = {\n          _id: n,\n          eat: action.info,\n          cost: action.cost,\n          size: action.size\n        };\n        return { ...state,\n          item: [...state.item, buyeat],\n          lenght: state.item.length\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const buy = (info, cost, size) => {\n  return {\n    type: BUYITEM,\n    info,\n    cost,\n    size\n  };\n};\nexport default buyItem;","map":{"version":3,"sources":["/Users/daloniil/Desktop/React/Pizza/pizzaProject/src/Redux/buy-item-reducer.js"],"names":["BUYITEM","removeDuplicates","arr","result","duplicatesIndices","forEach","current","index","includes","push","comparisonIndex","length","comparison","currentKeys","Object","keys","comparisonKeys","currentKeysString","sort","join","toLowerCase","comparisonKeysString","valuesEqual","i","key","initialState","item","lenght","buyItem","state","action","type","n","buyeat","_id","eat","info","cost","size","buy"],"mappings":"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","sourcesContent":["const BUYITEM = \"BUY-ITEM\"\n\n\nfunction removeDuplicates(arr) {\n\n    const result = [];\n    const duplicatesIndices = [];\n\n    // Перебираем каждый элемент в исходном массиве\n    debugger\n    arr.forEach((current, index) => {\n\n        if (duplicatesIndices.includes(index)) return;\n\n        result.push(current);\n\n        // Сравниваем каждый элемент в массиве после текущего\n        for (let comparisonIndex = index + 1; comparisonIndex < arr.length; comparisonIndex++) {\n\n            const comparison = arr[comparisonIndex];\n            const currentKeys = Object.keys(current);\n            const comparisonKeys = Object.keys(comparison);\n\n            // Проверяем длину массивов\n            if (currentKeys.length !== comparisonKeys.length) continue;\n\n            // Проверяем значение ключей\n            const currentKeysString = currentKeys.sort().join(\"\").toLowerCase();\n            const comparisonKeysString = comparisonKeys.sort().join(\"\").toLowerCase();\n            if (currentKeysString !== comparisonKeysString) continue;\n\n            // Проверяем индексы ключей\n            let valuesEqual = true;\n            for (let i = 0; i < currentKeys.length; i++) {\n                const key = currentKeys[i];\n                if (current[key] !== comparison[key]) {\n                    valuesEqual = false;\n                    break;\n                }\n            }\n            if (valuesEqual) duplicatesIndices.push(comparisonIndex);\n\n        } // Конец цикла\n    });\n    return result;\n}\n\nlet initialState = {\n    item: [],\n    lenght: null\n\n};\n\n\nconst buyItem = (state = initialState, action) => {\n    switch (action.type) {\n        case BUYITEM: {\n\n\n            let n = state.item.length;\n\n            debugger\n\n            let buyeat = {\n                _id: n,\n                eat: action.info,\n                cost: action.cost,\n                size: action.size,\n            }\n\n\n            return {\n\n\n                ...state,\n                item: [...state.item, buyeat],\n                lenght: state.item.length\n            }\n        }\n\n\n        default:\n            return state;\n    }\n}\n\n\nexport const buy = (info, cost, size) => {\n    return {\n        type: BUYITEM,\n        info, cost, size\n    }\n}\n\n\nexport default buyItem;"]},"metadata":{},"sourceType":"module"}