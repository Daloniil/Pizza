{"ast":null,"code":"const BUYITEM = \"BUY-ITEM\";\nconst LENGHT = \"LENGHT\";\nlet initialState = {\n  item: [],\n  lenght: null\n};\n\nconst buyItem = (state = initialState, action) => {\n  switch (action.type) {\n    case BUYITEM:\n      {\n        let n = state.item.length;\n        let buyeat = {\n          _id: n,\n          id: action.info.id,\n          name: action.info.name,\n          eat: action.info,\n          cost: action.cost,\n          size: action.size,\n          finalcost: action.cost\n        };\n\n        if (!state.item.some(buy => buy.id === action.info.id)) {\n          return { ...state,\n            item: [...state.item, buyeat],\n            lenght: state.item.length\n          };\n        } else if (!state.item.some(buy => buy.size === action.size)) {\n          return { ...state,\n            item: [...state.item, buyeat],\n            lenght: state.item.length\n          };\n        } else {\n          let searchId = action.info.id;\n          let index = state.item.findIndex(el => el.id === searchId);\n\n          if (index > -1) {\n            if (state.item[index].size > 0) {\n              let searchSize = action.size;\n              let finalindex = state.item.findIndex(el => el.size === searchSize);\n              return { ...state,\n                ...(state.item[finalindex].eat.amount += 1),\n                ...(state.item[finalindex].cost = state.item[finalindex].finalcost * state.item[finalindex].eat.amount)\n              };\n            } else {\n              let searchCost = action.info.id;\n              let finalinde = state.item.findIndex(el => el.id === searchCost);\n              return { ...state,\n                ...(state.item[finalinde - 1].eat.amount += 1),\n                ...(state.item[finalinde].cost = state.item[finalinde].finalcost * state.item[finalinde].eat.amount)\n              };\n            }\n          }\n        }\n      }\n\n    case LENGHT:\n      {\n        return { ...state,\n          lenght: action.lenght\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const buy = (info, cost, size) => {\n  return {\n    type: BUYITEM,\n    info,\n    cost,\n    size\n  };\n};\nexport const deleteLenght = lenght => {\n  return {\n    type: LENGHT,\n    lenght\n  };\n};\nexport default buyItem;","map":{"version":3,"sources":["/Users/daloniil/Desktop/React/Pizza/pizzaProject/src/Redux/buy-item-reducer.js"],"names":["BUYITEM","LENGHT","initialState","item","lenght","buyItem","state","action","type","n","length","buyeat","_id","id","info","name","eat","cost","size","finalcost","some","buy","searchId","index","findIndex","el","searchSize","finalindex","amount","searchCost","finalinde","deleteLenght"],"mappings":"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","sourcesContent":["const BUYITEM = \"BUY-ITEM\"\nconst LENGHT = \"LENGHT\"\n\n\nlet initialState = {\n    item: [],\n    lenght: null\n\n};\n\n\nconst buyItem = (state = initialState, action) => {\n    switch (action.type) {\n        case BUYITEM: {\n\n\n            let n = state.item.length;\n            let buyeat = {\n                _id: n,\n                id: action.info.id,\n                name: action.info.name,\n                eat: action.info,\n                cost: action.cost,\n                size: action.size,\n                finalcost: action.cost,\n            }\n\n            if (!state.item.some((buy) => buy.id === action.info.id)) {\n                return {\n                    ...state,\n                    item: [...state.item, buyeat],\n                    lenght: state.item.length\n\n                }\n            } else if (!state.item.some((buy) => buy.size === action.size)) {\n                return {\n                    ...state,\n                    item: [...state.item, buyeat],\n                    lenght: state.item.length\n\n                }\n\n            } else {\n                let searchId = action.info.id\n                let index = state.item.findIndex(el => el.id === searchId)\n                if (index > -1) {\n                    if (state.item[index].size > 0) {\n                        let searchSize = action.size\n                        let finalindex = state.item.findIndex(el => el.size === searchSize)\n                        return {\n                            ...state,\n                            ...state.item[finalindex].eat.amount += 1,\n                            ...state.item[finalindex].cost = state.item[finalindex].finalcost * state.item[finalindex].eat.amount,\n                        }\n                    } else {\n                        let searchCost = action.info.id\n                        let finalinde = state.item.findIndex(el => el.id === searchCost)\n                        return {\n                            ...state,\n                            ...state.item[finalinde - 1].eat.amount += 1,\n                            ...state.item[finalinde].cost = state.item[finalinde].finalcost * state.item[finalinde].eat.amount,\n                        }\n                    }\n                }\n\n            }\n\n        }\n\n        case LENGHT: {\n            return {\n                ...state,\n                lenght: action.lenght\n            }\n        }\n\n\n        default:\n            return state;\n    }\n}\n\n\nexport const buy = (info, cost, size) => {\n    return {\n        type: BUYITEM,\n        info, cost, size\n    }\n}\n\nexport const deleteLenght = (lenght) => {\n    return {\n        type: LENGHT,\n        lenght\n    }\n}\n\nexport default buyItem;"]},"metadata":{},"sourceType":"module"}